untyped

//=========================================================
//	_mapspawn.nut
//	Called on newgame or transitions, BEFORE entities have been created and initialized
//=========================================================

global function CodeCallback_MapSpawn
global function CodeCallback_ClientCommand
global table _ClientCommandCallbacks = {}
global entity _cc = null
global entity _sc = null



// dumpsite for other files

global const int TEAM_COUNT = 31

// end dumpsite


global struct spawnCallbackFuncArray
{
	array<void functionref( entity )> callbackArray
	string entityClassname
}

global struct spawnCallbackFuncArray_scriptNoteworthy
{
	array<void functionref( entity )> callbackArray
	string scriptNoteworthy
}

global struct spawnCallbackEditorClassFuncArray
{
	array<void functionref( entity )> callbackArray
	string entityClassname
	string entityEditorClassname
}

global typedef pilotEliminationDialogueCallbackType void functionref( int, array<entity>, int, array<entity> )

global struct SvGlobals
{
	entity worldspawn

	array<spawnCallbackFuncArray>                   spawnCallbackFuncs
	array<spawnCallbackEditorClassFuncArray>        spawnCallbackEditorClassFuncs
	array<spawnCallbackFuncArray_scriptNoteworthy>  spawnCallbackFuncs_scriptNoteworthy

	table<string, array<void functionref( entity )> > spawnCallbacks_scriptName

	array<pilotEliminationDialogueCallbackType> pilotEliminationDialogueCallbacks
	table<string, array<bool functionref( entity player, entity healthpack)> > onTouchHealthKitCallbacks
	array<void functionref( entity )> onClientConnectedCallbacks
	array<void functionref(entity)> onPlayerRespawnedCallbacks
	array<void functionref( entity player, entity npc_titan )> onPilotBecomesTitanCallbacks
	array<void functionref( entity player, entity npc_titan )> onTitanBecomesPilotCallbacks
	array<void functionref( entity, entity, entity) > soulTransferFuncs
	array<void functionref( entity titanSoul )> soulSettingsChangeFuncs
	array<void functionref( entity titanSoul )> soulInitFuncs
	table<string, array<void functionref( entity, var )> > damageByCallbacks

	bool functionref( entity ) gameModeAbandonPenaltyApplies

	bool functionref() timelimitCompleteFunc
	bool functionref( entity ) titanAvailabilityCheck
	bool cloakBreaksOnMelee = true //Reexamine if still needed if we have same behavior for cloak in MP/SP.
	float defaultPilotLeechTime = 2.8
	int winReason
	string winReasonText
	string lossReasonText
	string gameWonAnnouncement
	string gameLostAnnouncement

	table< int, int > npcsSpawnedThisFrame_scriptManagedArray

	float pilotRespawnDelay = 0.0

	array<void functionref( entity, var )> soulDeathFuncs

	table<string, void functionref(entity)> globalAnimEventCallbacks

	array<void functionref( entity titan, TitanLoadoutDef newTitanLoadout )> onTitanGetsNewLoadoutCallbacks
	array<void functionref( entity player, PilotLoadoutDef newTitanLoadout )> onPlayerGetsNewPilotLoadoutCallbacks
	array<void functionref( TitanLoadoutDef newTitanLoadout )> onUpdateDerivedTitanLoadoutCallbacks
	array<void functionref( entity player, TitanLoadoutDef newTitanLoadout )> onUpdateDerivedPlayerTitanLoadoutCallbacks
	array<void functionref( PilotLoadoutDef newPilotLoadout )> onUpdateDerivedPilotLoadoutCallbacks

	array<void functionref( entity victim, entity attacker, var damageInfo )> onPlayerKilledCallbacks
	array<void functionref( entity victim, entity attacker, var damageInfo )> onNPCKilledCallbacks

	array<void functionref( entity victim, var damageInfo )> onTitanDoomedCallbacks
	array<void functionref( entity victim, entity attacker )> onTitanHealthSegmentLostCallbacks
	array<void functionref( entity player )> onClientConnectingCallbacks
	array<void functionref( entity player )> onClientDisconnectedCallbacks
	array<void functionref( entity attacker, entity victim )> onPlayerAssistCallbacks

	array<void functionref( entity player )> onPlayerDropsScriptedItemsCallbacks
	array<void functionref( entity player )> onPlayerClassChangedCallbacks

	array<void functionref( entity ship, string anim )> onWaveSpawnDropshipSpawned

	table<string, array<void functionref( entity ent )> >onEntityChangedTeamCallbacks

	table<string, bool functionref( entity player, array<string>args )> clientCommandCallbacks
	table<string, void functionref( entity player, array<string>args )> clientCommandCallbacksNew
	array<void functionref()>[ eGameState._count_ ] gameStateEnterCallbacks

	bool allowPointsOverLimit = false

	bool bubbleShieldEnabled = true

	entity levelEnt

	//TODO: Get rid of these and use the new StartParticleEffectInWorld_ReturnEntity etc functions
	entity fx_CP_color_enemy        //Used for setting control points on FX
	entity fx_CP_color_friendly     //Used for setting control points on FX
	entity fx_CP_color_neutral      //Used for setting control points on FX

	array<entity>[ TEAM_COUNT ] classicMPDropships
	bool evacEnabled = false

	void functionref( entity player ) observerFunc
	array<void functionref()> playingThinkFuncTable
	array<void functionref()> thirtySecondsLeftFuncTable
	void functionref( int progress ) matchProgressAnnounceFunc

	void functionref( entity player ) cp_VO_NagFunc
	void functionref( entity player, entity hardpoint, float distance ) cp_VO_ApproachFunc
	void functionref( entity touchEnt, entity hardpoint ) cp_VO_LeftTriggerWithoutCappingFunc

	table<int, string> hardpointStringIDs

	entity[ TEAM_COUNT ] flagSpawnPoints

	vector distCheckTestPoint

	void functionref() scoreEventOverrideFunc

	array<void functionref( entity, entity )> onLeechedCustomCallbackFunc

	bool forceSpawnAsTitan                      = false
	bool forceSpawnIntoTitan                    = false
	bool forceDisableTitanfalls                 = false
	bool titanfallEnabled                       = true

	//RoundWinningKillReplay related
	entity roundWinningKillReplayViewEnt        = null
	entity roundWinningKillReplayVictim         = null
	int roundWinningKillReplayInflictorEHandle  = -1
	bool watchingRoundWinningKillReplay         = false

	bool forceNoFinalRoundDraws                 = false //Setting this to true will force a round based mode to keep playing rounds until a winner is determined. Game will not end on draw.

	bool roundBasedTeamScore_RoundReset         = true  // if true, reset team scores at the start of each round.
	bool isInPilotGracePeriod                   = false // if true, all players will be allowed to switch loadouts.
	
	table<string, void functionref(entity,array<string>)> globalAnimEventTokenizeCallbacks
	array<bool functionref( entity player, entity zipline, vector ziplineClosestPoint )> canUseZiplineCallbacks
	
	// r5 stuff
	array<void functionref(entity, entity)> onPilotEmbarkingTitanCallbacks
	array<void functionref(entity, entity)> onPlayerUsedOffhandCallbacks
	array< void functionref( entity, entity, string, int, vector, vector ) > onWeaponAttackCallbacks
	array< void functionref( entity ) > onPreClientDisconnectedCallbacks
	array< void functionref( entity, entity, int ) > onDeathBoxSpawnedCallbacks
}

global SvGlobals svGlobal

void function CodeCallback_MapSpawn() // original script entry point
{
	ShWeapons_LevelInit()
	//seterrorhandler(void function() {})
	ScriptCompilerTest()
	LoadDiamond()
	
	RegisterSignal( "CleanupFXAndSoundsForDecoy" )
	RegisterSignal( "MirageSpotted" )
	RegisterSignal( "forever" )
	RegisterSignal( "UpdatePlayerStatusCounts" )
	RegisterSignal( "BleedOut_OnReviveStart" )
	RegisterSignal( "PlayerPlaneStatusChanged" )
	RegisterSignal( "CancelTryRelinquishSquadLeaderOrBreakFromSquad" )
	RegisterSignal( "GameStateChanged" )
	RegisterSignal( "CleanupOutsideCircle" )

	_cc = CreateEntity( "point_clientcommand" )
	_sc = CreateEntity( "point_servercommand" )
	PrecacheEntity( "env_entity_dissolver" )

	FlagInit("EntitiesDidLoad")
	svGlobal.levelEnt = GetEnt( "worldspawn" )

	LevelVarInit()

	svGlobal.worldspawn = GetEnt( "worldspawn" )
	svGlobal.worldspawn.kv.startdark = true

	PrecacheModel( $"mdl/dev/editor_ref.rmdl" )
	PrecacheModel( $"mdl/dev/empty_model.rmdl" )
	PrecacheModel( $"mdl/error.rmdl" ) // model used when no model is provided

	PrecacheModel( $"mdl/Humans/class/medium/combat_dummie_medium.rmdl" )
	
	//Charms - todo: find a better way

	PrecacheModel( $"mdl/props/charm/charm_fireball.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_yeti.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_crow.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_rank_gold.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_rank_diamond.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_rank_predator.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_nessy.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_lifeline_drone.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_rank_platinum.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_pumpkin.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_gas_canister.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_jester.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_nessy_ghost.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_clown.rmdl" )
	PrecacheModel( $"mdl/props/charm/charm_witch.rmdl" )
	
	PrecacheModel( $"mdl/robots/drone_frag/drone_frag.rmdl" )
	PrecacheModel( $"mdl/vehicle/droppod_fireteam/droppod_fireteam.rmdl" )
	PrecacheModel( $"mdl/vehicle/droppod_loot/droppod_loot_LL_holo.rmdl" )
	PrecacheModel( $"mdl/robots/marvin/marvin_gladcard.rmdl" )
	PrecacheModel( $"mdl/menu/xp_badge.rmdl" )
	PrecacheModel( $"mdl/menu/coin.rmdl" )
	PrecacheModel( $"mdl/currency/crafting/currency_crafting_epic.rmdl" )

	PrecacheWeapon( $"mp_weapon_melee_survival" )
	PrecacheWeapon( $"mp_weapon_mdlspawner" )
	PrecacheWeapon( $"mp_weapon_alternator_smg" )
	PrecacheWeapon( $"mp_weapon_bubble_bunker" )
	PrecacheWeapon( $"mp_weapon_dmr" )
	PrecacheWeapon( $"mp_weapon_doubletake" )
	PrecacheWeapon( $"mp_weapon_energy_shotgun" )
	PrecacheWeapon( $"mp_weapon_lmg" )
	PrecacheWeapon( $"mp_weapon_lstar" )
	PrecacheWeapon( $"mp_weapon_mastiff" )
	PrecacheWeapon( $"mp_weapon_shotgun" )
	PrecacheWeapon( $"mp_weapon_shotgun_pistol" )
	PrecacheWeapon( $"mp_weapon_sniper" )
	PrecacheWeapon( $"mp_weapon_r97" )
	PrecacheWeapon( $"mp_ability_holopilot" )
	PrecacheWeapon( $"mp_weapon_hemlok" )
	PrecacheWeapon( $"mp_weapon_autopistol" )
	PrecacheWeapon( $"mp_weapon_wingman" )
	PrecacheWeapon( $"mp_weapon_thermite_grenade" )
	PrecacheWeapon( $"mp_weapon_deployable_medic" )
	PrecacheWeapon( $"mp_ability_grapple" )
	PrecacheWeapon( $"mp_weapon_vinson" )
	PrecacheWeapon( $"mp_weapon_pdw" )
	PrecacheWeapon( $"mp_ability_phase_walk" )
	PrecacheWeapon( $"mp_ability_3dash" )
	PrecacheWeapon( $"mp_weapon_phase_tunnel" )
	PrecacheWeapon( $"mp_weapon_zipline" )
	PrecacheWeapon( $"mp_ability_area_sonar_scan" )
	PrecacheWeapon( $"mp_ability_consumable" )
	PrecacheWeapon( $"mp_weapon_g2" )
	PrecacheWeapon( $"mp_weapon_grenade_bangalore" )
	PrecacheWeapon( $"mp_weapon_incap_shield" )
	PrecacheWeapon( $"mp_ability_care_package" )
	PrecacheWeapon( $"mp_ability_hunt_mode" )
	PrecacheWeapon( $"mp_weapon_dirty_bomb" )
	PrecacheWeapon( $"mp_weapon_energy_ar" )
	PrecacheWeapon( $"mp_weapon_esaw" )
	PrecacheWeapon( $"mp_weapon_semipistol" )
	PrecacheWeapon( $"mp_weapon_frag_grenade" )
	PrecacheWeapon( $"mp_weapon_rspn101" )
	PrecacheWeapon( $"mp_weapon_defender" )
	PrecacheWeapon( $"mp_weapon_jump_pad" )
	//PrecacheWeapon( $"mp_weapon_smart_pistol" ) //TODO: Fix This
	PrecacheWeapon( $"mp_weapon_grenade_creeping_bombardment" )
	PrecacheWeapon( $"mp_weapon_grenade_defensive_bombardment" )
	PrecacheWeapon( $"mp_weapon_grenade_sonar" )
	PrecacheWeapon( $"mp_weapon_grenade_electric_smoke" )
	PrecacheWeapon( $"mp_weapon_deployable_cover" )
	PrecacheWeapon( $"melee_data_knife" )

	printl( "Code Script: _mapspawn" )

	SV_CL_Shared_Init()
	ClientCommands_Init()
}

var function CodeCallback_ClientCommand( entity player, array<string> args )
{

	if( !Dev_CommandLineHasParm( "-nodebugprints" ) )
	{
		printl( "############################" )
		printl( "CodeCallback_ClientCommand() before" )
		printl( "player = " + player )
		printl( "args:" )
		foreach( key, value in args )
			printl( key + " : " + value )
		printl( "############################" )
	}


	string commandString = args.remove( 0 )

	//TODO: Track down Why VModEnable is being called from code?

	//Assert( commandString in svGlobal.clientCommandCallbacks )
	if(commandString in svGlobal.clientCommandCallbacksNew)
	{
		printt("CodeCallback_ClientCommand", commandString)
		svGlobal.clientCommandCallbacksNew[ commandString ]( player, args )
		return true
	}
	if ( commandString in svGlobal.clientCommandCallbacks  )
	{
		return svGlobal.clientCommandCallbacks[ commandString ]( player, args )
	}
	else
	{
		printl( "############################" )
		printl( "CommandString: " + commandString  + " was not added via AddClientCommandCallback but is being called in CodeCallback_ClientCommand" )
		printl( "############################" )
		return false
	}
}