untyped

//=========================================================
//	_clientcommands.gnut
//=========================================================

global function ClientCommands_Init

void function ClientCommands_Init()
{
	AddClientCommandCallback( "noclip", ClientCommand_noclip )
	AddClientCommandCallback( "infinite_ammo", ClientCommand_infinite_ammo )
	AddClientCommandCallback( "ToggleThirdPerson", ClientCommand_ToggleThirdPerson )

	#if R5DEV
	AddClientCommandCallback( "script", ClientCommand_script )
	#endif
}

bool function ClientCommand_noclip( entity player, array<string> args )
{
	if ( GetConVarInt( "sv_cheats" ) != 1 )
		return true

	if ( player.IsNoclipping() )
		player.SetPhysics( MOVETYPE_WALK )
	else
		player.SetPhysics( MOVETYPE_NOCLIP )
			
	return true
}

bool function ClientCommand_ToggleThirdPerson( entity player, array<string> args )
{
	if ( !IsFiringRangeGameMode() )
		return false

	if ( player.IsThirdPersonShoulderModeOn() )
		player.SetThirdPersonShoulderModeOff() 	
	else
		player.SetThirdPersonShoulderModeOn() 	
			
	return true
}

bool function ClientCommand_infinite_ammo( entity player, array<string> args )
{
    //soon
	return false
}

#if R5DEV
bool function ClientCommand_script( entity player, array<string> args )
{
	if( !IsValid( player ) )
		return true
	
	if( GetConVarInt( "sv_cheats" ) != 1 )
		return true

	string func = ""

	for ( int i = 0; i < args.len(); i++ )
	{
		func = (func + args[i])

		if(args[i] == "'" || ((i+1) < args.len() && args[i+1] == "'")) {
			// don't add spaces inside strings
		} else {
			func = (func + " ")
		}
	}
	func = StringReplace( func, "'", "\"" )

	try {
		compilestring( "return "+func+"" )()
	}
	catch( error ) {
		print("[ SCRIPT CMD ERROR ]:\n")
		print("entity: " + player + "\n")
		print("error:  " + error + "\n\n")
	}
	return true
}
#endif