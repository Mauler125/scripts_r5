// Events for handlers
// UIE_CLICK
// UIE_GET_FOCUS
// UIE_LOSE_FOCUS

global function UICodeCallback_UIInit
global function UICodeCallback_UIShutdown
global function UICodeCallback_ControllerModeChanged
global function UICodeCallback_OnVideoOver
global function AddUICallback_OnLevelInit
global function UICodeCallback_SmokeTestRunning
global function AddUICallback_InputModeChanged
global function AddUICallback_KeyBindSet
global function AddUICallback_UIShutdown

global function SetShowingMap
global function IsShowingMap

global struct TabDef
{
	var                                                    button
	var                                                    panel
	var                                                    parentPanel
	string                                                 title
	bool                                                   visible = true
	bool                                                   enabled = true
	bool                                                   new = false
	bool                                                   wantDividerAfter = false
	float                                                  tabBarLeftOffsetFracIfVisible = 0.0
	bool functionref( var panel, int destinationTabIndex ) canNavigateFunc = null

	bool   useCustomColors
	vector customDefaultBGCol = <1.0, 1.0, 1.0>
	vector customDefaultBarCol = <1.0, 1.0, 1.0>
	vector customFocusedBGCol = <1.0, 1.0, 1.0>
	vector customFocusedBarCol = <1.0, 1.0, 1.0>
	vector customSelectedBGCol = <1.0, 1.0, 1.0>
	vector customSelectedBarCol = <1.0, 1.0, 1.0>
}

// Footer alignment
global const int LEFT = 0
global const int RIGHT = 1

global struct InputDef
{
	int                          input
	int                          alignment = LEFT
	bool                         clickable = false
	string                       gamepadLabel
	var                          vguiElem
	string                       mouseLabel
	bool functionref()           conditionCheckFunc
	bool                         lastConditionCheckResult
	void functionref( var )      activateFunc
	void functionref( InputDef ) updateFunc
}

global struct DialogButtonData
{
	string             label
	void functionref() activateFunc
	string             focusMessage
	bool               startFocused

	void functionref( table payload ) activateFuncEx
	table                             payload

	bool   isDisabled = false
	vector customColor = <1, 1, 1>
}

global struct DialogFooterData
{
	string             label
	void functionref() activateFunc
}

global struct DialogMessageRuiData
{
	string message = ""
	vector style1Color = <1, 1, 1>
	vector style2Color = <0.5, 0.5, 0.5>
	vector style3Color = <0.5, 0.5, 0.5>

	float style1FontScale = 1.0
	float style2FontScale = 1.0
	float style3FontScale = 1.0
}

global struct DialogData
{
	var                    menu
	string                 header
	string                 message
	DialogMessageRuiData & ruiMessage
	array                  messageColor = [161, 161, 161, 255]
	asset                  image
	asset                  rightImage = $""
	bool                   forceChoice = false
	bool                   noChoice = false
	bool                   noChoiceWithNavigateBack = false
	bool                   showSpinner = false
	bool                   showPCBackButton = false
	float                  inputDisableTime = 0
	table<int, bool>       coloredButton
	bool                   darkenBackground = false
	bool                   useFullMessageHeight = false
	float                  timeoutDuration = -1
	int                    magicNumber = 0

	array<DialogButtonData> buttonData
	array<DialogFooterData> footerData
}

global struct MenuDef
{
	var menu

	void functionref( var )        initFunc
	void functionref()             openFunc
	void functionref()             closeFunc
	void functionref()             showFunc
	void functionref()             hideFunc
	void functionref()             getTopLevelFunc
	void functionref()             loseTopLevelFunc
	void functionref()             navBackFunc
	//void functionref()             tabChangedFunc
	void functionref()             inputModeChangedFunc
	array<void functionref( var )> thinkFuncs

	array<void functionref( var )> openFuncs // TODO: replace openFunc with this version, which has parameters and allows more than one
	array<void functionref( var )> closeFuncs // TODO: replace openFunc with this version, which has parameters and allows more than one

	array<InputDef>                     footerData
	table<int, void functionref( var )> registeredInput

	bool hasTabs = false

	bool        isDialog = false
	bool        isPopup = false
	DialogData& dialogData
	bool        isDynamicHeight = false
	bool        gamepadCursorEnabled = true

	bool   clearBlur = true
	float  enterTime
	string pin_fromId = ""
}

global struct PanelDef
{
	void functionref( var menu )                                     initFunc
	array<void functionref( var panel )>                             showFuncs
	array<void functionref( var panel )>                             hideFuncs
	array<void functionref( var panel, var oldFocus, var newFocus )> focusChangedFuncs

	void functionref( var panel ) navUpFunc
	void functionref( var panel ) navDownFunc
	void functionref( var panel ) navBackFunc

	string tabTitle = "Default"

	array<InputDef>                     footerData
	table<int, void functionref( var )> registeredInput
	table<int, void functionref( var )> panelInputs // ideally would use variable above, but that system is intricately tied to footer options

	bool hasTabs = false

	var defaultFocus

	bool  isActive = false
	bool  isCurrentlyShown = false
	float enterTime
	bool  panelClearBlur = false
}

global struct PieChartEntry
{
	string     displayName
	float      numValue
	array<int> color = [127, 127, 127, 255]
	float      fracValue = 0.0
}

global struct PieChartData
{
	array<PieChartEntry> entries
	array<int>           labelColor = [46, 49, 51, 255]
	bool                 timeBased = false
	float                sum = 0.0
}

global enum eMenuMusicContext
{
	NONE,
	MAIN_MENU,
	LOBBY,
	CUSTOM,
}


global struct ConfirmDialogData
{
	string        headerText = "headerText"
	string        messageText = "messageText"
	array<string> okText = ["#B_BUTTON_CLOSE", "#B_BUTTON_CLOSE"]
	array<string> yesText = ["#A_BUTTON_YES", "#YES"]
	array<string> noText = ["#B_BUTTON_CANCEL", "#B_BUTTON_CANCEL"]
	asset         contextImage = $""

	float timerEndTime = -1.0

	void functionref( int )    resultCallback

	int dialogType
	var __menu
}


global struct UIGlobals
{
	table             menus = {}
	array             allMenus = []
	array<MenuDef>    menuStack
	string            loadingLevel = ""
	string            loadedLevel = ""
	string            previousLevel = ""
	string            previousPlaylist = ""
	var               activeMenu = null
	array<var>        activePanels = []
	bool              lastMenuNavDirection = MENU_NAV_FORWARD
	bool              lobbyFromLoadingScreen = false
	bool              eventHandlersAdded = false
	bool              loadoutsInitialized = false
	bool              matchmaking = false
	var               dialogCloseCallback = null
	table             signalDummy = {}
	float             dialogInputEnableTime = 0.0
	int               activeMusicContext = eMenuMusicContext.NONE
	string            activeMusicTrack = ""
	ItemFlavor ornull WORKAROUND_activeMusicPack = null
	string ornull     desiredCustomMusicOrNull = null
	bool              isShowingMap = false // Quickfix for beta so Esc closes the map. Longterm map should be a menu that client updates.

	//int		pilotSpawnLoadoutIndex = -1
	int titanSpawnLoadoutIndex = -1

	bool updatePilotSpawnLoadout = false
	bool updateTitanSpawnLoadout = false

	string editingLoadoutType = "pilot"
	string editingLoadoutProperty = ""
	int    editingLoadoutIndex = -1
	string editingItemRef = ""
	int    editingItemType = -1
	var    editingParentItemRef = null
	int    editingWeaponCategory = -1

	ItemFlavor ornull topLevelCustomizeContext

	table<string, var>    ui_ChallengeProgress = {}

	var                     ConfirmMenuMessage
	var                     ConfirmMenuErrorCode
	array<DialogButtonData> dialogButtonData

	array    buttonConfigs
	array    stickConfigs

	bool videoSettingsChanged = false

	bool playingVideo = false
	bool playingCredits = false

	array<void functionref()>                resolutionChangedCallbacks
	array<void functionref(bool)>            inputModeChangeCallbacks
	array<void functionref(string, string)>  keyBindSetCallbacks
	array<void functionref()>                uiShutdownCallbacks

	table<var, MenuDef> menuData
	string              pin_lastMenuId

	table<string, int>                        intVars
	table<string, bool>                       boolVars
	table<string, var>                        varVars
	table<string, array<void functionref()> > varChangeFuncs

	array<void functionref()> onLevelInitCallbacks

	bool tabButtonsRegistered = false

	table                panels = {}
	array<var>           allPanels
	table<var, PanelDef> panelData

	int launching = eLaunching.FALSE

	bool updateCachedNewItems = true

	bool cachedLoadoutsReady = false
	bool commsMenuOpen = false

	bool isOptInEnabled = false

	table	matchPinData = {}
}

global UIGlobals uiGlobal


void function UICodeCallback_SmokeTestRunning( string param )
{
	printt( "UICodeCallback_SmokeTestRunning : " + param );
}


void function UICodeCallback_UIInit()
{
	PIN_Init()

	ScriptCompilerTest()

	ShUtilityAll_Init()
	LevelVarInit()

	VPKNotifyFile( "media/intro_captions.txt" )
	VPKNotifyFile( "cfg/startup.cfg" )
	VPKNotifyFile( "cfg/startup_retail.cfg" )

	UtilityUI_Init()

	Settings_Init() // UI script doesn't need everything in this, reorganize
	GameModes_Init()
	UIVars_Init()

	PassivesShared_Init()
	//ChallengesShared_Init()
	//ChallengesContent_Init()
	ShXP_Init()

	MenuGamepadLayout_Init()
	//MenuChallenges_Init()
	MenuUtility_Init()
	//MenuCredits_Init()
	//MenuMapSelect_Init()

	RegisterSignal( "LevelShutdown" )
	RegisterSignal( "CleanupInGameMenus" )
	RegisterSignal( "PlayVideoEnded" )
	RegisterSignal( "ActiveMenuChanged" )
	RegisterSignal( "LevelFinishedLoading" )
	RegisterSignal( "OpenErrorDialog" )
	RegisterSignal( "BoughtItem" )
	RegisterSignal( "TrackIsOverScrollBar" )
	RegisterSignal( "UpdateUIMusicOnMusicPackLoadoutSlotReadyThread" )

	thread UpdateClientMenuOpenStateThread()

	InitGamepadConfigs()
	InitMenus()
	EmbeddedText_Init()

	ListPanelInit()
	ScrollPanelInit()
	GridPanelInit()

	ShGladiatorCards_Init()

	#if HAS_TOOLTIPS
		Sh_InitToolTips()
	#endif

	ShLoadouts_VMInit()

	#if R5DEV
		if ( IsFullyConnected() ) // special cases to handle uiscript_reset in dev
		{
		}
	#endif
}


void function UICodeCallback_UIShutdown()
{
	foreach ( func in uiGlobal.uiShutdownCallbacks )
	{
		func()
	}

	//StopUIMusic()
}


void function UICodeCallback_ControllerModeChanged( bool controllerModeEnabled )
{
	//printt( "CONTROLLER! " + controllerModeEnabled + ", " + IsControllerModeActive() )
	foreach ( callbackFunc in uiGlobal.inputModeChangeCallbacks )
	{
		callbackFunc( controllerModeEnabled )
	}

	var activeMenu = GetActiveMenu()
	if ( activeMenu == null )
		return

	if ( uiGlobal.menuData[ activeMenu ].inputModeChangedFunc != null )
		uiGlobal.menuData[ activeMenu ].inputModeChangedFunc()

	UpdateFooterOptions()

	if ( IsDialog( activeMenu ) && activeMenu != GetMenu( "PromoDialog" ) ) // TEMP: Only old dialogs need this call
		UpdateDialogFooterVisibility( activeMenu, controllerModeEnabled )
}


void function UICodeCallback_OnVideoOver()
{
	Signal( uiGlobal.signalDummy, "PlayVideoEnded" )
}


void function UpdateClientMenuOpenStateThread()
{
	for ( ; ; )
	{
		WaitSignal( uiGlobal.signalDummy, "ActiveMenuChanged" )

		if ( !IsLobby() )
		{
			int newState = 0
			if ( IsDialogOnlyActiveMenu() )
				newState = 2
			else if ( GetActiveMenu() != null )
				newState = 1

			if ( CanRunClientScript() )
				RunClientScript( "SetMenuOpenState", newState )
		}
	}
}


void function AddUICallback_OnLevelInit( void functionref() callbackFunc )
{
	Assert( !(uiGlobal.onLevelInitCallbacks.contains( callbackFunc )), "Already added " + string( callbackFunc ) + " with AddUICallback_OnLevelInit" )
	uiGlobal.onLevelInitCallbacks.append( callbackFunc )
}


void function SetShowingMap( bool val )
{
	uiGlobal.isShowingMap = val
}


bool function IsShowingMap()
{
	return uiGlobal.isShowingMap
}


void function AddUICallback_UIShutdown( void functionref() callbackFunc )
{
	uiGlobal.uiShutdownCallbacks.append( callbackFunc )
}


void function AddUICallback_InputModeChanged( void functionref( bool ) callbackFunc )
{
	uiGlobal.inputModeChangeCallbacks.append( callbackFunc )
}


void function AddUICallback_KeyBindSet( void functionref( string, string ) callbackFunc )
{
	uiGlobal.keyBindSetCallbacks.append( callbackFunc )
}