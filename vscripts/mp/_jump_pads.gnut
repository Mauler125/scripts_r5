// stub script

global function JumpPad_Init
global function JumpPad_CreatedCallback

// copied from r5-90 mp_rr_desertlands_common
const float JUMP_PAD_PUSH_RADIUS = 45.0
const float JUMP_PAD_PUSH_PROJECTILE_RADIUS = 32.0//98.0
const float JUMP_PAD_PUSH_VELOCITY = 950.0
const float JUMP_PAD_VIEW_PUNCH_SOFT = 25.0
const float JUMP_PAD_VIEW_PUNCH_HARD = 4.0
const float JUMP_PAD_VIEW_PUNCH_RAND = 4.0
const float JUMP_PAD_VIEW_PUNCH_SOFT_TITAN = 120.0
const float JUMP_PAD_VIEW_PUNCH_HARD_TITAN = 20.0
const float JUMP_PAD_VIEW_PUNCH_RAND_TITAN = 20.0
const TEAM_JUMPJET_DBL = $"P_team_jump_jet_ON_trails"
const ENEMY_JUMPJET_DBL = $"P_enemy_jump_jet_ON_trails"
const asset JUMP_PAD_MODEL = $"mdl/props/octane_jump_pad/octane_jump_pad.rmdl"

const float JUMP_PAD_ANGLE_LIMIT = 0.70
const float JUMP_PAD_ICON_HEIGHT_OFFSET = 48.0
const float JUMP_PAD_ACTIVATION_TIME = 0.5
const asset JUMP_PAD_LAUNCH_FX = $"P_grndpnd_launch"
const JUMP_PAD_DESTRUCTION = "jump_pad_destruction"

void function JumpPad_Init()
{
	RegisterSignal("JumpPadStart")

  AddSpawnCallbackEditorClass( "prop_dynamic", "script_survival_jumppad", JumpPad_CreatedCallback )
}

void function JumpPad_CreatedCallback( entity jumpPad )
{

  vector origin = jumpPad.GetOrigin() // should this allow weapon_jump_pad to be OriginToGround
	vector angles = jumpPad.GetAngles()

  entity mover = CreateScriptMover( origin, angles )

	if( IsValid( jumpPad.GetParent() ) )
	{
		mover.SetParent( jumpPad.GetParent() )
	}

  jumpPad.SetParent( mover )

  thread JumpPad_PlayAnims( jumpPad, mover )

	entity trigger = CreateEntity( "trigger_cylinder_heavy" )
	// SetTargetName( trigger, "geyser_trigger" )

	trigger.SetOwner( jumpPad )
	trigger.SetRadius( JUMP_PAD_PUSH_RADIUS )
	trigger.SetAboveHeight( 32 )
	trigger.SetBelowHeight( 16 ) //need this because the player or jump pad can sink into the ground a tiny bit and we check player feet not half height
	trigger.SetOrigin( origin )
	trigger.SetAngles( angles )
	trigger.SetTriggerType( TT_JUMP_PAD )
	trigger.SetLaunchScaleValues( JUMP_PAD_PUSH_VELOCITY, 1.25 )
	trigger.SetViewPunchValues( JUMP_PAD_VIEW_PUNCH_SOFT, JUMP_PAD_VIEW_PUNCH_HARD, JUMP_PAD_VIEW_PUNCH_RAND )
	//trigger.SetLaunchDir( <0.0, 0.0, 1.0> )
	trigger.UsePointCollision()
	trigger.kv.triggerFilterNonCharacter = "0"
	DispatchSpawn( trigger )
	trigger.SetEnterCallback( OnJumpPadAreaEnter )
    
  //Need to set parent so the jump trigger is destroyed with the pad entity
  trigger.SetParent( jumpPad )

	// entity traceBlocker = CreateTraceBlockerVolume( trigger.GetOrigin(), 24.0, true, CONTENTS_BLOCK_PING | CONTENTS_NOGRAPPLE, TEAM_MILITIA, "GEYSER_PING_SCRIPT_NAME" ) // todo: replace geyser_ping_script_name --
	// traceBlocker.SetBox( <-192, -192, -16>, <192, 192, 3000> )

	AddEntityCallback_OnDamaged( jumpPad, JumpPad_OnTakeDamage )
  AddEntityCallback_OnKilled( jumpPad, JumpPad_OnDeath )
}

void function JumpPad_OnDeath( entity ent, var damageInfo )
{
  //todo: Explosion and sound 
  EmitSoundOnEntity( ent, "JumpPad_Explo")
  PlayImpactFXTable( ent.GetOrigin(), ent, "titan_exp_ground" )
}

void function JumpPad_OnTakeDamage( entity ent, var damageInfo )
{
	entity attacker = DamageInfo_GetAttacker( damageInfo )
  printt("JumpPad_OnTakeDamage. HP", ent.GetHealth())
	if ( IsValid( attacker ) && attacker.IsPlayer() )
	{
		PlayerDamageFeedback( ent, damageInfo, 0 )
    UpdateDamageState( ent, damageInfo )
	}
}

void function JumpPad_PlayAnims( entity jumpPad, entity mover )
{
  EmitSoundOnEntity( jumpPad, "JumpPad_Deploy_Unpack" )
  PlayAnim( jumpPad, "prop_octane_jump_pad_deploy", mover )
  PlayAnim( jumpPad, "prop_octane_jump_pad_deploy_idle", mover )   
}

void function JumpPad_PlayLaunchAnim( entity trigger )
{
	entity jumpPad = trigger.GetOwner()
	entity mover = jumpPad.GetParent()

	PlayAnim( jumpPad, "prop_octane_jump_pad_deploy_trans", mover )
}

void function OnJumpPadAreaEnter( entity trigger, entity ent )
{
	thread JumpPad_PlayLaunchAnim( trigger )
	JumpPadPushEnt( trigger, ent, trigger.GetOrigin(), trigger.GetAngles() )
}

void function JumpPadPushEnt( entity trigger, entity ent, vector origin, vector angles )
{
	if ( JumpPad_ShouldPushPlayerOrNPC( ent ) )
	{
		if ( ent.IsPlayer() )
		{
			entity jumpPad = trigger.GetOwner()
			if ( IsValid( jumpPad ) )
			{
				int fxId = GetParticleSystemIndex( JUMP_PAD_LAUNCH_FX )
				StartParticleEffectOnEntity( jumpPad, fxId, FX_PATTACH_ABSORIGIN_FOLLOW, 0 )
			}
			// thread Geyser_JumpJetsWhileAirborne( ent ) // no
		}
		else
		{
			EmitSoundOnEntity( ent, "JumpPad_LaunchPlayer_3p" )
			EmitSoundOnEntity( ent, "JumpPad_AirborneMvmt_3p" )
		}
	}
}

bool function JumpPad_ShouldPushPlayerOrNPC( entity target )
{
	if ( target.IsTitan() )
		return false

	if ( IsSuperSpectre( target ) )
		return false

	if ( IsTurret( target ) )
		return false

	if ( IsDropship( target ) )
		return false

	return true
}