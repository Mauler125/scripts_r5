global function FiringRangeGameMode_Init

global const float FIRINGRANGE_DISSOLVE_TIME = 5.0
global const float FIRINGRANGE_RACK_RESPAWN_TIME = 0.5
global const float FIRINGRANGE_ATTACHMENTS_POS_OFFSET = 128.0
global const int FIRINGRANGE_ATTACHMENTS_MAX_COLUMN = 6

#if(false)







//
#endif //

#if(CLIENT)
global function SCB_BroadcastFriendlyFireChange
#endif //

struct {
	table<string, array<LootData> > weaponsPerAmmoType,
	table<string, array<string> > attachmentsPerAmmoType
} file

void function FiringRangeGameMode_Init()
{
	if ( !IsFiringRangeGameMode() )
		return

	Remote_RegisterClientFunction( "SCB_BroadcastFriendlyFireChange", "entity" )

	
	#if SERVER
		AddCallback_EntitiesDidLoad( EntitiesDidLoad )
		AddSpawnCallback( "prop_survival", OnPropSurvivalSpawned )
	#endif

	#if(false)








//


	#endif //

	#if(CLIENT)
		//

		IntroDisplayThread()
	#endif //
}

#if(CLIENT)
void function SCB_BroadcastFriendlyFireChange( entity playerThatChanged )
{
	entity localPlayer = GetLocalClientPlayer()
	bool isEnabled = IsTeamRabid( localPlayer.GetTeam() )
	string mainText = (isEnabled ? "#NOTIFY_FRIENDLY_FIRE_ON" : "#NOTIFY_FRIENDLY_FIRE_OFF")
	string subText = (IsValid( playerThatChanged ) ? Localize( "#NOTIFY_FRIENDLY_FIRE_SUBTEXT", playerThatChanged.GetPlayerName() ) : "")
	vector titleColor = (isEnabled ? ENEMY_COLOR : FRIENDLY_COLOR)
	AnnouncementMessage( localPlayer, mainText, subText, titleColor )
}
#endif //

void function EntitiesDidLoad()
{
	#if SERVER
	array<entity> lootbins = GetEntArrayByScriptName("staging_loot_bin")
	array<entity> movers = GetEntArrayByScriptName("script_mover_lightweight")
	
	foreach(entity lootbin in lootbins)
		lootbin.Destroy()

	FillWeaponTable()
	FillAttachmentTable()
	CreateRacks()
	SpawnAttachments()

	foreach(string ammoType, array<string> attachments in file.attachmentsPerAmmoType)
	{
		printl(">> " + ammoType)
		print("\t- ")
		foreach(string attachment in attachments)
		{
			print(" " + attachment)
		}
	}
	#endif
}

#if SERVER

// Get All weapons, arange them in a table per ammo type
void function FillWeaponTable()
{
	foreach ( string lootRef, LootData lootData in SURVIVAL_Loot_GetLootDataTable() )
	{
		if ( lootData.lootType != eLootType.MAINWEAPON )
			continue

		if ( lootData.ref.find("_gold") > 0)
			continue

		if(!(lootData.ammoType in file.weaponsPerAmmoType))
			file.weaponsPerAmmoType[lootData.ammoType] <- []

		file.weaponsPerAmmoType[lootData.ammoType].append(lootData)
	}
}

// Get All attachments, check if can be put on each gun per ammo
// Add it if missing to our list
void function FillAttachmentTable()
{
	foreach ( string ammoType, array<LootData> weapons in file.weaponsPerAmmoType )
	{
		if ( ammoType.len() == 0 )
			continue

		array<LootData> allAttachments = SURVIVAL_Loot_GetByType( eLootType.ATTACHMENT )
		array<LootData> unSortedAttachments = []

		foreach(LootData weapon in weapons)
		{
			array<LootData> attachments = []
			foreach ( LootData data in allAttachments )
			{
				if ( !CanAttachToWeapon( data.ref, weapon.ref ) )
					continue
				attachments.append(data)
			}
			ExtendLootDataArrayIfMissing(attachments, unSortedAttachments)
		}

		// Make the hopups last, rest alphabetical
		array<string> strHopups = []
		array<string> strAttachments = []
		foreach(LootData a in unSortedAttachments)
		{
			if(a.ref.slice(0,a.ref.find("_")) != "hopup")
				strAttachments.append(a.ref)
			else
				strHopups.append(a.ref)
		}
		strAttachments.sort()
		strAttachments.extend(strHopups)

		file.attachmentsPerAmmoType[ammoType] <- strAttachments
	}
}

// Add string only if missing
void function ExtendLootDataArrayIfMissing(array<LootData> from, array<LootData> to)
{
	foreach(LootData f in from)
	{
		bool add = true
		foreach(LootData t in to)
			if(t == f){	add = false; break	}
		if(add) to.append(f)
	}
}

void function SpawnAttachments()
{
	array<entity> rackSpawns = GetEntArrayByScriptName("weapon_racks")

	const float placementOffset = 24.0
	int ammoIndex = 0
	foreach ( string ammoType, array<LootData> arr in file.weaponsPerAmmoType) // Correspond to each rack
	{
		foreach(string ammoType2, array<string> refs in file.attachmentsPerAmmoType)
		{
			if(ammoType != ammoType2)
				continue

			entity r = rackSpawns[ammoIndex]
			vector firstPos = r.GetOrigin() - r.GetRightVector()*FIRINGRANGE_ATTACHMENTS_POS_OFFSET

			printl("AMMO: " + ammoIndex + ammoType)

			int row = 0
			int col = 0
			foreach(string ref in refs)
			{
				if(col >= FIRINGRANGE_ATTACHMENTS_MAX_COLUMN)
				{
					row++
					col = 0
				}

				vector pos = firstPos - r.GetRightVector()*col*placementOffset + r.GetForwardVector()*row*placementOffset

				entity loot = SpawnGenericLoot( ref, pos, <0,0,0>, 1 )
				thread OnPickupGenericThread(loot, ref)
				col++
			}
		}
		ammoIndex++
	}
}

// Create weapon racks per ammo type
void function CreateRacks()
{
	array<entity> rackSpawns = GetEntArrayByScriptName("weapon_racks")

	const float rackOffset = 32.0

	int ammoIndex = 0
	foreach ( string ammoType, array<LootData> arr in file.weaponsPerAmmoType)
	{ 
		if(ammoIndex >= rackSpawns.len() )
			break

		printl(">> Spawning weapons from ammo type: " + ammoType)

		float rOffset = (arr.len()*rackOffset)/2

		for(int i = 0; i<arr.len(); i++)
		{
			entity r = rackSpawns[ammoIndex]
			vector pos = r.GetOrigin() + r.GetRightVector()*i*rackOffset - r.GetRightVector()*rOffset
			vector ang = r.GetAngles()

			entity rack = CreateWeaponRack(pos, ang, arr[i].ref)
			thread OnPickupFromRackThread(GetWeaponFromRack(rack), arr[i].ref)
		}
		ammoIndex++
	}
}

// When the weapon is grabbed from the rack -> respawn it
void function OnPickupFromRackThread(entity item, string ref)
{
	entity rack = item.GetParent()
	item.WaitSignal("OnItemPickup")

	wait FIRINGRANGE_RACK_RESPAWN_TIME
	thread OnPickupFromRackThread(SpawnWeaponOnRack(rack, ref), ref)
}

// When the item is grabbed -> respawn it
void function OnPickupGenericThread(entity item, string ref)
{
	vector pos = item.GetOrigin()
	vector angles = item.GetAngles()
	item.WaitSignal("OnItemPickup")

	wait FIRINGRANGE_RACK_RESPAWN_TIME
	thread OnPickupGenericThread(SpawnGenericLoot(ref, pos, angles, 1), ref)
}

// On item dropped
void function OnPropSurvivalSpawned(entity prop)
{
	thread OnPropSurvivalSpawned_Thread(prop)
}
void function OnPropSurvivalSpawned_Thread(entity prop)
{
	wait FIRINGRANGE_DISSOLVE_TIME
	if(prop == null || IsValid(prop) == false)
		return

	entity par = prop.GetParent()
	if(par && par.GetClassName() == "prop_physics")
		prop.Dissolve(ENTITY_DISSOLVE_CORE, <0,0,0>, 200)
}

#endif

#if(false)




































//





//


//











//


//


































































































#endif //

#if(CLIENT)

void function IntroDisplayThread()
{
	thread function() : ()
	{
		FlagWait( "EntitiesDidLoad" )
		wait 3.0

		entity viewPlayer = GetLocalViewPlayer()
		if ( IsValid( viewPlayer ) )
			MapZones_ZoneIntroText( viewPlayer, ("#" + GetMapName()), -1 )
	}()
}
#endif //


#if(false)



//













//



//
//








//












//










//










//

























#endif //
